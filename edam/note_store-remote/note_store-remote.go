// Code generated by Thrift Compiler (0.16.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"github.com/twsiyuan/evernote-sdk-golang/edam"
)

var _ = edam.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  SyncState getSyncState(string authenticationToken)")
  fmt.Fprintln(os.Stderr, "  SyncChunk getFilteredSyncChunk(string authenticationToken, i32 afterUSN, i32 maxEntries, SyncChunkFilter filter)")
  fmt.Fprintln(os.Stderr, "  SyncState getLinkedNotebookSyncState(string authenticationToken, LinkedNotebook linkedNotebook)")
  fmt.Fprintln(os.Stderr, "  SyncChunk getLinkedNotebookSyncChunk(string authenticationToken, LinkedNotebook linkedNotebook, i32 afterUSN, i32 maxEntries, bool fullSyncOnly)")
  fmt.Fprintln(os.Stderr, "   listNotebooks(string authenticationToken)")
  fmt.Fprintln(os.Stderr, "   listAccessibleBusinessNotebooks(string authenticationToken)")
  fmt.Fprintln(os.Stderr, "  Notebook getNotebook(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  Notebook getDefaultNotebook(string authenticationToken)")
  fmt.Fprintln(os.Stderr, "  Notebook createNotebook(string authenticationToken, Notebook notebook)")
  fmt.Fprintln(os.Stderr, "  i32 updateNotebook(string authenticationToken, Notebook notebook)")
  fmt.Fprintln(os.Stderr, "  i32 expungeNotebook(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "   listTags(string authenticationToken)")
  fmt.Fprintln(os.Stderr, "   listTagsByNotebook(string authenticationToken, Guid notebookGuid)")
  fmt.Fprintln(os.Stderr, "  Tag getTag(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  Tag createTag(string authenticationToken, Tag tag)")
  fmt.Fprintln(os.Stderr, "  i32 updateTag(string authenticationToken, Tag tag)")
  fmt.Fprintln(os.Stderr, "  void untagAll(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  i32 expungeTag(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "   listSearches(string authenticationToken)")
  fmt.Fprintln(os.Stderr, "  SavedSearch getSearch(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  SavedSearch createSearch(string authenticationToken, SavedSearch search)")
  fmt.Fprintln(os.Stderr, "  i32 updateSearch(string authenticationToken, SavedSearch search)")
  fmt.Fprintln(os.Stderr, "  i32 expungeSearch(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  i32 findNoteOffset(string authenticationToken, NoteFilter filter, Guid guid)")
  fmt.Fprintln(os.Stderr, "  NotesMetadataList findNotesMetadata(string authenticationToken, NoteFilter filter, i32 offset, i32 maxNotes, NotesMetadataResultSpec resultSpec)")
  fmt.Fprintln(os.Stderr, "  NoteCollectionCounts findNoteCounts(string authenticationToken, NoteFilter filter, bool withTrash)")
  fmt.Fprintln(os.Stderr, "  Note getNoteWithResultSpec(string authenticationToken, Guid guid, NoteResultSpec resultSpec)")
  fmt.Fprintln(os.Stderr, "  Note getNote(string authenticationToken, Guid guid, bool withContent, bool withResourcesData, bool withResourcesRecognition, bool withResourcesAlternateData)")
  fmt.Fprintln(os.Stderr, "  LazyMap getNoteApplicationData(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  string getNoteApplicationDataEntry(string authenticationToken, Guid guid, string key)")
  fmt.Fprintln(os.Stderr, "  i32 setNoteApplicationDataEntry(string authenticationToken, Guid guid, string key, string value)")
  fmt.Fprintln(os.Stderr, "  i32 unsetNoteApplicationDataEntry(string authenticationToken, Guid guid, string key)")
  fmt.Fprintln(os.Stderr, "  string getNoteContent(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  string getNoteSearchText(string authenticationToken, Guid guid, bool noteOnly, bool tokenizeForIndexing)")
  fmt.Fprintln(os.Stderr, "  string getResourceSearchText(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "   getNoteTagNames(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  Note createNote(string authenticationToken, Note note)")
  fmt.Fprintln(os.Stderr, "  Note updateNote(string authenticationToken, Note note)")
  fmt.Fprintln(os.Stderr, "  i32 deleteNote(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  i32 expungeNote(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  Note copyNote(string authenticationToken, Guid noteGuid, Guid toNotebookGuid)")
  fmt.Fprintln(os.Stderr, "   listNoteVersions(string authenticationToken, Guid noteGuid)")
  fmt.Fprintln(os.Stderr, "  Note getNoteVersion(string authenticationToken, Guid noteGuid, i32 updateSequenceNum, bool withResourcesData, bool withResourcesRecognition, bool withResourcesAlternateData)")
  fmt.Fprintln(os.Stderr, "  Resource getResource(string authenticationToken, Guid guid, bool withData, bool withRecognition, bool withAttributes, bool withAlternateData)")
  fmt.Fprintln(os.Stderr, "  LazyMap getResourceApplicationData(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  string getResourceApplicationDataEntry(string authenticationToken, Guid guid, string key)")
  fmt.Fprintln(os.Stderr, "  i32 setResourceApplicationDataEntry(string authenticationToken, Guid guid, string key, string value)")
  fmt.Fprintln(os.Stderr, "  i32 unsetResourceApplicationDataEntry(string authenticationToken, Guid guid, string key)")
  fmt.Fprintln(os.Stderr, "  i32 updateResource(string authenticationToken, Resource resource)")
  fmt.Fprintln(os.Stderr, "  string getResourceData(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  Resource getResourceByHash(string authenticationToken, Guid noteGuid, string contentHash, bool withData, bool withRecognition, bool withAlternateData)")
  fmt.Fprintln(os.Stderr, "  string getResourceRecognition(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  string getResourceAlternateData(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  ResourceAttributes getResourceAttributes(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  Notebook getPublicNotebook(UserID userId, string publicUri)")
  fmt.Fprintln(os.Stderr, "  SharedNotebook shareNotebook(string authenticationToken, SharedNotebook sharedNotebook, string message)")
  fmt.Fprintln(os.Stderr, "  CreateOrUpdateNotebookSharesResult createOrUpdateNotebookShares(string authenticationToken, NotebookShareTemplate shareTemplate)")
  fmt.Fprintln(os.Stderr, "  i32 updateSharedNotebook(string authenticationToken, SharedNotebook sharedNotebook)")
  fmt.Fprintln(os.Stderr, "  Notebook setNotebookRecipientSettings(string authenticationToken, string notebookGuid, NotebookRecipientSettings recipientSettings)")
  fmt.Fprintln(os.Stderr, "   listSharedNotebooks(string authenticationToken)")
  fmt.Fprintln(os.Stderr, "  LinkedNotebook createLinkedNotebook(string authenticationToken, LinkedNotebook linkedNotebook)")
  fmt.Fprintln(os.Stderr, "  i32 updateLinkedNotebook(string authenticationToken, LinkedNotebook linkedNotebook)")
  fmt.Fprintln(os.Stderr, "   listLinkedNotebooks(string authenticationToken)")
  fmt.Fprintln(os.Stderr, "  i32 expungeLinkedNotebook(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  AuthenticationResult authenticateToSharedNotebook(string shareKeyOrGlobalId, string authenticationToken)")
  fmt.Fprintln(os.Stderr, "  SharedNotebook getSharedNotebookByAuth(string authenticationToken)")
  fmt.Fprintln(os.Stderr, "  void emailNote(string authenticationToken, NoteEmailParameters parameters)")
  fmt.Fprintln(os.Stderr, "  string shareNote(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  void stopSharingNote(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  AuthenticationResult authenticateToSharedNote(string guid, string noteKey, string authenticationToken)")
  fmt.Fprintln(os.Stderr, "  RelatedResult findRelated(string authenticationToken, RelatedQuery query, RelatedResultSpec resultSpec)")
  fmt.Fprintln(os.Stderr, "  UpdateNoteIfUsnMatchesResult updateNoteIfUsnMatches(string authenticationToken, Note note)")
  fmt.Fprintln(os.Stderr, "  ManageNotebookSharesResult manageNotebookShares(string authenticationToken, ManageNotebookSharesParameters parameters)")
  fmt.Fprintln(os.Stderr, "  ShareRelationships getNotebookShares(string authenticationToken, string notebookGuid)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := edam.NewNoteStoreClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "getSyncState":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSyncState requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetSyncState(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getFilteredSyncChunk":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetFilteredSyncChunk requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err367 := (strconv.Atoi(flag.Arg(2)))
    if err367 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err368 := (strconv.Atoi(flag.Arg(3)))
    if err368 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    arg369 := flag.Arg(4)
    mbTrans370 := thrift.NewTMemoryBufferLen(len(arg369))
    defer mbTrans370.Close()
    _, err371 := mbTrans370.WriteString(arg369)
    if err371 != nil {
      Usage()
      return
    }
    factory372 := thrift.NewTJSONProtocolFactory()
    jsProt373 := factory372.GetProtocol(mbTrans370)
    argvalue3 := edam.NewSyncChunkFilter()
    err374 := argvalue3.Read(context.Background(), jsProt373)
    if err374 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.GetFilteredSyncChunk(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getLinkedNotebookSyncState":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetLinkedNotebookSyncState requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg376 := flag.Arg(2)
    mbTrans377 := thrift.NewTMemoryBufferLen(len(arg376))
    defer mbTrans377.Close()
    _, err378 := mbTrans377.WriteString(arg376)
    if err378 != nil {
      Usage()
      return
    }
    factory379 := thrift.NewTJSONProtocolFactory()
    jsProt380 := factory379.GetProtocol(mbTrans377)
    argvalue1 := edam.NewLinkedNotebook()
    err381 := argvalue1.Read(context.Background(), jsProt380)
    if err381 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GetLinkedNotebookSyncState(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getLinkedNotebookSyncChunk":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "GetLinkedNotebookSyncChunk requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg383 := flag.Arg(2)
    mbTrans384 := thrift.NewTMemoryBufferLen(len(arg383))
    defer mbTrans384.Close()
    _, err385 := mbTrans384.WriteString(arg383)
    if err385 != nil {
      Usage()
      return
    }
    factory386 := thrift.NewTJSONProtocolFactory()
    jsProt387 := factory386.GetProtocol(mbTrans384)
    argvalue1 := edam.NewLinkedNotebook()
    err388 := argvalue1.Read(context.Background(), jsProt387)
    if err388 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err389 := (strconv.Atoi(flag.Arg(3)))
    if err389 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    tmp3, err390 := (strconv.Atoi(flag.Arg(4)))
    if err390 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    argvalue4 := flag.Arg(5) == "true"
    value4 := argvalue4
    fmt.Print(client.GetLinkedNotebookSyncChunk(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "listNotebooks":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListNotebooks requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ListNotebooks(context.Background(), value0))
    fmt.Print("\n")
    break
  case "listAccessibleBusinessNotebooks":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListAccessibleBusinessNotebooks requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ListAccessibleBusinessNotebooks(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getNotebook":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetNotebook requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.GetNotebook(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getDefaultNotebook":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetDefaultNotebook requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetDefaultNotebook(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createNotebook":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateNotebook requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg398 := flag.Arg(2)
    mbTrans399 := thrift.NewTMemoryBufferLen(len(arg398))
    defer mbTrans399.Close()
    _, err400 := mbTrans399.WriteString(arg398)
    if err400 != nil {
      Usage()
      return
    }
    factory401 := thrift.NewTJSONProtocolFactory()
    jsProt402 := factory401.GetProtocol(mbTrans399)
    argvalue1 := edam.NewNotebook()
    err403 := argvalue1.Read(context.Background(), jsProt402)
    if err403 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.CreateNotebook(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateNotebook":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateNotebook requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg405 := flag.Arg(2)
    mbTrans406 := thrift.NewTMemoryBufferLen(len(arg405))
    defer mbTrans406.Close()
    _, err407 := mbTrans406.WriteString(arg405)
    if err407 != nil {
      Usage()
      return
    }
    factory408 := thrift.NewTJSONProtocolFactory()
    jsProt409 := factory408.GetProtocol(mbTrans406)
    argvalue1 := edam.NewNotebook()
    err410 := argvalue1.Read(context.Background(), jsProt409)
    if err410 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateNotebook(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "expungeNotebook":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ExpungeNotebook requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.ExpungeNotebook(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "listTags":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListTags requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ListTags(context.Background(), value0))
    fmt.Print("\n")
    break
  case "listTagsByNotebook":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ListTagsByNotebook requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.ListTagsByNotebook(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getTag":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTag requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.GetTag(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "createTag":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateTag requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg419 := flag.Arg(2)
    mbTrans420 := thrift.NewTMemoryBufferLen(len(arg419))
    defer mbTrans420.Close()
    _, err421 := mbTrans420.WriteString(arg419)
    if err421 != nil {
      Usage()
      return
    }
    factory422 := thrift.NewTJSONProtocolFactory()
    jsProt423 := factory422.GetProtocol(mbTrans420)
    argvalue1 := edam.NewTag()
    err424 := argvalue1.Read(context.Background(), jsProt423)
    if err424 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.CreateTag(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateTag":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateTag requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg426 := flag.Arg(2)
    mbTrans427 := thrift.NewTMemoryBufferLen(len(arg426))
    defer mbTrans427.Close()
    _, err428 := mbTrans427.WriteString(arg426)
    if err428 != nil {
      Usage()
      return
    }
    factory429 := thrift.NewTJSONProtocolFactory()
    jsProt430 := factory429.GetProtocol(mbTrans427)
    argvalue1 := edam.NewTag()
    err431 := argvalue1.Read(context.Background(), jsProt430)
    if err431 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateTag(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "untagAll":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UntagAll requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.UntagAll(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "expungeTag":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ExpungeTag requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.ExpungeTag(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "listSearches":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListSearches requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ListSearches(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getSearch":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetSearch requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.GetSearch(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "createSearch":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateSearch requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg440 := flag.Arg(2)
    mbTrans441 := thrift.NewTMemoryBufferLen(len(arg440))
    defer mbTrans441.Close()
    _, err442 := mbTrans441.WriteString(arg440)
    if err442 != nil {
      Usage()
      return
    }
    factory443 := thrift.NewTJSONProtocolFactory()
    jsProt444 := factory443.GetProtocol(mbTrans441)
    argvalue1 := edam.NewSavedSearch()
    err445 := argvalue1.Read(context.Background(), jsProt444)
    if err445 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.CreateSearch(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateSearch":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateSearch requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg447 := flag.Arg(2)
    mbTrans448 := thrift.NewTMemoryBufferLen(len(arg447))
    defer mbTrans448.Close()
    _, err449 := mbTrans448.WriteString(arg447)
    if err449 != nil {
      Usage()
      return
    }
    factory450 := thrift.NewTJSONProtocolFactory()
    jsProt451 := factory450.GetProtocol(mbTrans448)
    argvalue1 := edam.NewSavedSearch()
    err452 := argvalue1.Read(context.Background(), jsProt451)
    if err452 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateSearch(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "expungeSearch":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ExpungeSearch requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.ExpungeSearch(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findNoteOffset":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FindNoteOffset requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg456 := flag.Arg(2)
    mbTrans457 := thrift.NewTMemoryBufferLen(len(arg456))
    defer mbTrans457.Close()
    _, err458 := mbTrans457.WriteString(arg456)
    if err458 != nil {
      Usage()
      return
    }
    factory459 := thrift.NewTJSONProtocolFactory()
    jsProt460 := factory459.GetProtocol(mbTrans457)
    argvalue1 := edam.NewNoteFilter()
    err461 := argvalue1.Read(context.Background(), jsProt460)
    if err461 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := edam.GUID(argvalue2)
    fmt.Print(client.FindNoteOffset(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "findNotesMetadata":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "FindNotesMetadata requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg464 := flag.Arg(2)
    mbTrans465 := thrift.NewTMemoryBufferLen(len(arg464))
    defer mbTrans465.Close()
    _, err466 := mbTrans465.WriteString(arg464)
    if err466 != nil {
      Usage()
      return
    }
    factory467 := thrift.NewTJSONProtocolFactory()
    jsProt468 := factory467.GetProtocol(mbTrans465)
    argvalue1 := edam.NewNoteFilter()
    err469 := argvalue1.Read(context.Background(), jsProt468)
    if err469 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err470 := (strconv.Atoi(flag.Arg(3)))
    if err470 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    tmp3, err471 := (strconv.Atoi(flag.Arg(4)))
    if err471 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    arg472 := flag.Arg(5)
    mbTrans473 := thrift.NewTMemoryBufferLen(len(arg472))
    defer mbTrans473.Close()
    _, err474 := mbTrans473.WriteString(arg472)
    if err474 != nil {
      Usage()
      return
    }
    factory475 := thrift.NewTJSONProtocolFactory()
    jsProt476 := factory475.GetProtocol(mbTrans473)
    argvalue4 := edam.NewNotesMetadataResultSpec()
    err477 := argvalue4.Read(context.Background(), jsProt476)
    if err477 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.FindNotesMetadata(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "findNoteCounts":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FindNoteCounts requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg479 := flag.Arg(2)
    mbTrans480 := thrift.NewTMemoryBufferLen(len(arg479))
    defer mbTrans480.Close()
    _, err481 := mbTrans480.WriteString(arg479)
    if err481 != nil {
      Usage()
      return
    }
    factory482 := thrift.NewTJSONProtocolFactory()
    jsProt483 := factory482.GetProtocol(mbTrans480)
    argvalue1 := edam.NewNoteFilter()
    err484 := argvalue1.Read(context.Background(), jsProt483)
    if err484 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.FindNoteCounts(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getNoteWithResultSpec":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetNoteWithResultSpec requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    arg488 := flag.Arg(3)
    mbTrans489 := thrift.NewTMemoryBufferLen(len(arg488))
    defer mbTrans489.Close()
    _, err490 := mbTrans489.WriteString(arg488)
    if err490 != nil {
      Usage()
      return
    }
    factory491 := thrift.NewTJSONProtocolFactory()
    jsProt492 := factory491.GetProtocol(mbTrans489)
    argvalue2 := edam.NewNoteResultSpec()
    err493 := argvalue2.Read(context.Background(), jsProt492)
    if err493 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.GetNoteWithResultSpec(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getNote":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "GetNote requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    argvalue4 := flag.Arg(5) == "true"
    value4 := argvalue4
    argvalue5 := flag.Arg(6) == "true"
    value5 := argvalue5
    fmt.Print(client.GetNote(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "getNoteApplicationData":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetNoteApplicationData requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.GetNoteApplicationData(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getNoteApplicationDataEntry":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetNoteApplicationDataEntry requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetNoteApplicationDataEntry(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "setNoteApplicationDataEntry":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SetNoteApplicationDataEntry requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.SetNoteApplicationDataEntry(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "unsetNoteApplicationDataEntry":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UnsetNoteApplicationDataEntry requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UnsetNoteApplicationDataEntry(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getNoteContent":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetNoteContent requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.GetNoteContent(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getNoteSearchText":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetNoteSearchText requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.GetNoteSearchText(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getResourceSearchText":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetResourceSearchText requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.GetResourceSearchText(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getNoteTagNames":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetNoteTagNames requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.GetNoteTagNames(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "createNote":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateNote requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg523 := flag.Arg(2)
    mbTrans524 := thrift.NewTMemoryBufferLen(len(arg523))
    defer mbTrans524.Close()
    _, err525 := mbTrans524.WriteString(arg523)
    if err525 != nil {
      Usage()
      return
    }
    factory526 := thrift.NewTJSONProtocolFactory()
    jsProt527 := factory526.GetProtocol(mbTrans524)
    argvalue1 := edam.NewNote()
    err528 := argvalue1.Read(context.Background(), jsProt527)
    if err528 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.CreateNote(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateNote":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateNote requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg530 := flag.Arg(2)
    mbTrans531 := thrift.NewTMemoryBufferLen(len(arg530))
    defer mbTrans531.Close()
    _, err532 := mbTrans531.WriteString(arg530)
    if err532 != nil {
      Usage()
      return
    }
    factory533 := thrift.NewTJSONProtocolFactory()
    jsProt534 := factory533.GetProtocol(mbTrans531)
    argvalue1 := edam.NewNote()
    err535 := argvalue1.Read(context.Background(), jsProt534)
    if err535 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateNote(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteNote":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DeleteNote requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.DeleteNote(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "expungeNote":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ExpungeNote requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.ExpungeNote(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "copyNote":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CopyNote requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    argvalue2 := flag.Arg(3)
    value2 := edam.GUID(argvalue2)
    fmt.Print(client.CopyNote(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "listNoteVersions":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ListNoteVersions requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.ListNoteVersions(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getNoteVersion":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "GetNoteVersion requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    tmp2, err547 := (strconv.Atoi(flag.Arg(3)))
    if err547 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    argvalue4 := flag.Arg(5) == "true"
    value4 := argvalue4
    argvalue5 := flag.Arg(6) == "true"
    value5 := argvalue5
    fmt.Print(client.GetNoteVersion(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "getResource":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "GetResource requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    argvalue4 := flag.Arg(5) == "true"
    value4 := argvalue4
    argvalue5 := flag.Arg(6) == "true"
    value5 := argvalue5
    fmt.Print(client.GetResource(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "getResourceApplicationData":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetResourceApplicationData requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.GetResourceApplicationData(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getResourceApplicationDataEntry":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetResourceApplicationDataEntry requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetResourceApplicationDataEntry(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "setResourceApplicationDataEntry":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SetResourceApplicationDataEntry requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.SetResourceApplicationDataEntry(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "unsetResourceApplicationDataEntry":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UnsetResourceApplicationDataEntry requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UnsetResourceApplicationDataEntry(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "updateResource":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateResource requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg570 := flag.Arg(2)
    mbTrans571 := thrift.NewTMemoryBufferLen(len(arg570))
    defer mbTrans571.Close()
    _, err572 := mbTrans571.WriteString(arg570)
    if err572 != nil {
      Usage()
      return
    }
    factory573 := thrift.NewTJSONProtocolFactory()
    jsProt574 := factory573.GetProtocol(mbTrans571)
    argvalue1 := edam.NewResource()
    err575 := argvalue1.Read(context.Background(), jsProt574)
    if err575 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateResource(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getResourceData":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetResourceData requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.GetResourceData(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getResourceByHash":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "GetResourceByHash requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    argvalue4 := flag.Arg(5) == "true"
    value4 := argvalue4
    argvalue5 := flag.Arg(6) == "true"
    value5 := argvalue5
    fmt.Print(client.GetResourceByHash(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "getResourceRecognition":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetResourceRecognition requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.GetResourceRecognition(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getResourceAlternateData":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetResourceAlternateData requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.GetResourceAlternateData(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getResourceAttributes":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetResourceAttributes requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.GetResourceAttributes(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getPublicNotebook":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetPublicNotebook requires 2 args")
      flag.Usage()
    }
    tmp0, err590 := (strconv.Atoi(flag.Arg(1)))
    if err590 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := edam.UserID(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetPublicNotebook(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "shareNotebook":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ShareNotebook requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg593 := flag.Arg(2)
    mbTrans594 := thrift.NewTMemoryBufferLen(len(arg593))
    defer mbTrans594.Close()
    _, err595 := mbTrans594.WriteString(arg593)
    if err595 != nil {
      Usage()
      return
    }
    factory596 := thrift.NewTJSONProtocolFactory()
    jsProt597 := factory596.GetProtocol(mbTrans594)
    argvalue1 := edam.NewSharedNotebook()
    err598 := argvalue1.Read(context.Background(), jsProt597)
    if err598 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.ShareNotebook(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "createOrUpdateNotebookShares":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateOrUpdateNotebookShares requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg601 := flag.Arg(2)
    mbTrans602 := thrift.NewTMemoryBufferLen(len(arg601))
    defer mbTrans602.Close()
    _, err603 := mbTrans602.WriteString(arg601)
    if err603 != nil {
      Usage()
      return
    }
    factory604 := thrift.NewTJSONProtocolFactory()
    jsProt605 := factory604.GetProtocol(mbTrans602)
    argvalue1 := edam.NewNotebookShareTemplate()
    err606 := argvalue1.Read(context.Background(), jsProt605)
    if err606 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.CreateOrUpdateNotebookShares(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateSharedNotebook":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateSharedNotebook requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg608 := flag.Arg(2)
    mbTrans609 := thrift.NewTMemoryBufferLen(len(arg608))
    defer mbTrans609.Close()
    _, err610 := mbTrans609.WriteString(arg608)
    if err610 != nil {
      Usage()
      return
    }
    factory611 := thrift.NewTJSONProtocolFactory()
    jsProt612 := factory611.GetProtocol(mbTrans609)
    argvalue1 := edam.NewSharedNotebook()
    err613 := argvalue1.Read(context.Background(), jsProt612)
    if err613 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateSharedNotebook(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "setNotebookRecipientSettings":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SetNotebookRecipientSettings requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg616 := flag.Arg(3)
    mbTrans617 := thrift.NewTMemoryBufferLen(len(arg616))
    defer mbTrans617.Close()
    _, err618 := mbTrans617.WriteString(arg616)
    if err618 != nil {
      Usage()
      return
    }
    factory619 := thrift.NewTJSONProtocolFactory()
    jsProt620 := factory619.GetProtocol(mbTrans617)
    argvalue2 := edam.NewNotebookRecipientSettings()
    err621 := argvalue2.Read(context.Background(), jsProt620)
    if err621 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SetNotebookRecipientSettings(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "listSharedNotebooks":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListSharedNotebooks requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ListSharedNotebooks(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createLinkedNotebook":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateLinkedNotebook requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg624 := flag.Arg(2)
    mbTrans625 := thrift.NewTMemoryBufferLen(len(arg624))
    defer mbTrans625.Close()
    _, err626 := mbTrans625.WriteString(arg624)
    if err626 != nil {
      Usage()
      return
    }
    factory627 := thrift.NewTJSONProtocolFactory()
    jsProt628 := factory627.GetProtocol(mbTrans625)
    argvalue1 := edam.NewLinkedNotebook()
    err629 := argvalue1.Read(context.Background(), jsProt628)
    if err629 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.CreateLinkedNotebook(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateLinkedNotebook":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateLinkedNotebook requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg631 := flag.Arg(2)
    mbTrans632 := thrift.NewTMemoryBufferLen(len(arg631))
    defer mbTrans632.Close()
    _, err633 := mbTrans632.WriteString(arg631)
    if err633 != nil {
      Usage()
      return
    }
    factory634 := thrift.NewTJSONProtocolFactory()
    jsProt635 := factory634.GetProtocol(mbTrans632)
    argvalue1 := edam.NewLinkedNotebook()
    err636 := argvalue1.Read(context.Background(), jsProt635)
    if err636 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateLinkedNotebook(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "listLinkedNotebooks":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListLinkedNotebooks requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ListLinkedNotebooks(context.Background(), value0))
    fmt.Print("\n")
    break
  case "expungeLinkedNotebook":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ExpungeLinkedNotebook requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.ExpungeLinkedNotebook(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "authenticateToSharedNotebook":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AuthenticateToSharedNotebook requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.AuthenticateToSharedNotebook(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getSharedNotebookByAuth":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSharedNotebookByAuth requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetSharedNotebookByAuth(context.Background(), value0))
    fmt.Print("\n")
    break
  case "emailNote":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "EmailNote requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg644 := flag.Arg(2)
    mbTrans645 := thrift.NewTMemoryBufferLen(len(arg644))
    defer mbTrans645.Close()
    _, err646 := mbTrans645.WriteString(arg644)
    if err646 != nil {
      Usage()
      return
    }
    factory647 := thrift.NewTJSONProtocolFactory()
    jsProt648 := factory647.GetProtocol(mbTrans645)
    argvalue1 := edam.NewNoteEmailParameters()
    err649 := argvalue1.Read(context.Background(), jsProt648)
    if err649 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.EmailNote(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "shareNote":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ShareNote requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.ShareNote(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "stopSharingNote":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "StopSharingNote requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.StopSharingNote(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "authenticateToSharedNote":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AuthenticateToSharedNote requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AuthenticateToSharedNote(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "findRelated":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FindRelated requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg658 := flag.Arg(2)
    mbTrans659 := thrift.NewTMemoryBufferLen(len(arg658))
    defer mbTrans659.Close()
    _, err660 := mbTrans659.WriteString(arg658)
    if err660 != nil {
      Usage()
      return
    }
    factory661 := thrift.NewTJSONProtocolFactory()
    jsProt662 := factory661.GetProtocol(mbTrans659)
    argvalue1 := edam.NewRelatedQuery()
    err663 := argvalue1.Read(context.Background(), jsProt662)
    if err663 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg664 := flag.Arg(3)
    mbTrans665 := thrift.NewTMemoryBufferLen(len(arg664))
    defer mbTrans665.Close()
    _, err666 := mbTrans665.WriteString(arg664)
    if err666 != nil {
      Usage()
      return
    }
    factory667 := thrift.NewTJSONProtocolFactory()
    jsProt668 := factory667.GetProtocol(mbTrans665)
    argvalue2 := edam.NewRelatedResultSpec()
    err669 := argvalue2.Read(context.Background(), jsProt668)
    if err669 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.FindRelated(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "updateNoteIfUsnMatches":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateNoteIfUsnMatches requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg671 := flag.Arg(2)
    mbTrans672 := thrift.NewTMemoryBufferLen(len(arg671))
    defer mbTrans672.Close()
    _, err673 := mbTrans672.WriteString(arg671)
    if err673 != nil {
      Usage()
      return
    }
    factory674 := thrift.NewTJSONProtocolFactory()
    jsProt675 := factory674.GetProtocol(mbTrans672)
    argvalue1 := edam.NewNote()
    err676 := argvalue1.Read(context.Background(), jsProt675)
    if err676 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateNoteIfUsnMatches(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "manageNotebookShares":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ManageNotebookShares requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg678 := flag.Arg(2)
    mbTrans679 := thrift.NewTMemoryBufferLen(len(arg678))
    defer mbTrans679.Close()
    _, err680 := mbTrans679.WriteString(arg678)
    if err680 != nil {
      Usage()
      return
    }
    factory681 := thrift.NewTJSONProtocolFactory()
    jsProt682 := factory681.GetProtocol(mbTrans679)
    argvalue1 := edam.NewManageNotebookSharesParameters()
    err683 := argvalue1.Read(context.Background(), jsProt682)
    if err683 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ManageNotebookShares(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getNotebookShares":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetNotebookShares requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetNotebookShares(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
